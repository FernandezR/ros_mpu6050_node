cmake_minimum_required(VERSION 2.8.3)
project(mpu_6050)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
   roscpp
   sensor_msgs
   geometry_msgs
   std_msgs
   std_srvs
   nodelet
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)

#SET(CMAKE_BUILD_TYPE Debug)

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

#######################################
## Declare ROS messages and services ##
#######################################

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
#add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
#)

## Generate added messages and services with any dependencies listed here
#generate_messages(
#   DEPENDENCIES
#   std_msgs  # Or other packages containing msgs
#)

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
   INCLUDE_DIRS
   LIBRARIES mpu6050_nodelet
   CATKIN_DEPENDS std_msgs std_srvs sensor_msgs geometry_msgs nodelet
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
   include  ${catkin_INCLUDE_DIRS}
)

# create imu_filter_nodelet library
add_library (mpu6050_nodelet  src/i2ckernel.cpp src/HMC58X3/HMC58X3.cpp src/MPU60X0/MPU60X0.cpp src/mpu6050.cpp src/mpu6050nodelet.cpp)
target_link_libraries(mpu6050_nodelet ${catkin_LIBRARIES})

## Declare a cpp executable
add_executable(mpu_6050_node src/i2ckernel.cpp src/HMC58X3/HMC58X3.cpp src/MPU60X0/MPU60X0.cpp src/mpu6050.cpp src/mpu_6050_node.cpp)

## Add cmake target dependencies of the executable/library
## as an example, message headers may need to be generated before nodes
add_dependencies(mpu_6050_node mpu_6050_generate_messages_cpp)

## Specify libraries to link a library or executable target against
target_link_libraries(mpu_6050_node
   ${catkin_LIBRARIES}
)

#############
## Install ##
#############

install(TARGETS mpu6050_nodelet mpu_6050_node
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

install(FILES mpu6050_nodelet.xml
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
  )
#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_mpu_6050.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
